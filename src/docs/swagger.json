{
  "swagger": "2.0",
  "info": {
    "description": "Este documento contiene la documentaci贸n para utilizar la API de TODOs",
    "version": "1.0.0",
    "title": "Rest贸 API",
    "contact": {
      "email": "apiteam@resto.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host": "https://ctd-api-resto.herokuapp.com",
  "basePath": "/v1",
  "tags": [
    {
      "name": "products",
      "description": "Contains the available products of the Rest贸"
    },
    {
      "name": "orders",
      "description": "Access to Rest贸 orders"
    },
    {
      "name": "users",
      "description": "Operations about users"
    }
  ],
  "schemes": ["https", "http"],
  "paths": {
    "/products": {
      "get": {
        "tags": ["products"],
        "summary": "Returns product inventory",
        "description": "Returns all the products listed in the store",
        "operationId": "getInventory",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/product_stored"
              }
            }
          }
        }
      },
      "post": {
        "tags": ["products"],
        "summary": "Add a new product to the store",
        "operationId": "addProduct",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "header",
            "name": "authorization",
            "description": "Authentication Token",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Product object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/product_upload"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/product_stored"
            }
          },
          "400": {
            "description": "Missing Arguments"
          },
          "401": {
            "description": "Token has expired. Please login again"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "store_auth": ["write:products"]
          }
        ]
      }
    },
    "/products/{productId}": {
      "put": {
        "tags": ["products"],
        "summary": "Update an existing product",
        "description": "",
        "operationId": "updateProduct",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "ID of product to update",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "header",
            "name": "authorization",
            "description": "Authentication Token",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Product's properties that need to be updated in the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/product_upload"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Acepted",
            "schema": {
              "$ref": "#/definitions/product_stored"
            }
          },
          "401": {
            "description": "Token has expired. Please login again"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Product not found"
          }
        },
        "security": [
          {
            "store_auth": ["write:products"]
          }
        ]
      },
      "delete": {
        "tags": ["products"],
        "summary": "Deletes a product",
        "description": "",
        "operationId": "deleteProduct",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "Product id to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "header",
            "name": "authorization",
            "description": "Authentication Token",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted"
          },
          "401": {
            "description": "Token has expired. Please login again"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Product not found"
          },
          "409": {
            "description": "Product linked to an active order. Please resolve conflict and try again"
          }
        },
        "security": [
          {
            "store_auth": ["write:products"]
          }
        ]
      }
    },
    "/orders": {
      "get": {
        "tags": ["orders"],
        "summary": "Returns orders inventory",
        "description": "Returns all the orders existing in the store",
        "operationId": "getOrders",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "header",
            "name": "authorization",
            "description": "Authentication Token",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/order_complete"
              }
            }
          }
        },
        "security": [
          {
            "store_auth": ["write:orders"]
          }
        ]
      },
      "post": {
        "tags": ["orders"],
        "summary": "Add a new order to the store",
        "description": "",
        "operationId": "addOrder",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Order object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/order_sent"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/order_complete"
            }
          },
          "400": {
            "description": "User not found"
          },
          "405": {
            "description": "Missing Arguments"
          }
        }
      }
    },
    "/orders/{orderId}": {
      "put": {
        "tags": ["orders"],
        "summary": "Update the status of an existing order",
        "description": "",
        "operationId": "updateOrderStatus",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "orderId",
            "description": "Order id to update",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "header",
            "name": "authorization",
            "description": "Authentication Token",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Order status that needs to be updated in the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/order_statusToUpload"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Acepted",
            "schema": {
              "$ref": "#/definitions/order_uploaded"
            }
          },
          "401": {
            "description": "Token has expired. Please login again"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Order not found"
          },
          "405": {
            "description": "Invalid status suplied"
          }
        },
        "security": [
          {
            "store_auth": ["write:orders"]
          }
        ]
      },
      "delete": {
        "tags": ["orders"],
        "summary": "Deletes an order",
        "description": "",
        "operationId": "deleteOrder",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Order id to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "header",
            "name": "authorization",
            "description": "Authentication Token",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted"
          },
          "401": {
            "description": "Token has expired. Please login again"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Order not found"
          }
        },
        "security": [
          {
            "store_auth": ["write:products"]
          }
        ]
      }
    },
    "private/users": {
      "get": {
        "tags": ["users"],
        "summary": "Returns users list",
        "description": "Returns all the users registered in the store",
        "operationId": "getUsers",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "header",
            "name": "authorization",
            "description": "Authentication Token",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/user_registered"
              }
            }
          }
        },
        "security": [
          {
            "store_auth": ["write:users"]
          }
        ]
      }
    },
    "/users": {
      "post": {
        "tags": ["users"],
        "summary": "Create user",
        "description": "Creates a new user into the store.",
        "operationId": "createUser",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/user_register"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User created",
            "schema": {
              "type": "string",
              "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
            }
          },
          "400": {
            "description": "Missing Arguments"
          },
          "409": {
            "description": "Username already in use / User already exists"
          }
        }
      }
    },
    "/users/login": {
      "post": {
        "tags": ["users"],
        "summary": "Logs user into the store",
        "description": "",
        "operationId": "loginUser",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "credentials",
            "in": "body",
            "description": "The username and password for login",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "username": {
                  "type": "string"
                },
                "password": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string",
              "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
            },
            "headers": {
              "X-Expires-After": {
                "type": "string",
                "format": "date-time",
                "description": "date in UTC when token expires"
              }
            }
          },
          "400": {
            "description": "Invalid Username / Wrong password supplied"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "store_auth": {
      "type": "oauth2",
      "authorizationUrl": "localhost/v1/users/login",
      "flow": "implicit",
      "scopes": {
        "write:products": "create, modify and delete products in the store",
        "write:orders": "modify orders status in the store",
        "write:users": "list the registered users"
      }
    }
  },
  "definitions": {
    "order_sent": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "number",
          "example": 1
        },
        "description": {
          "type": "string",
          "example": "1xDoubleBurg 2xFrenchFr"
        },
        "products": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/selected_item"
          }
        },
        "paymentMethod": {
          "type": "string",
          "description": "payment method chosen by the user",
          "enum": ["cash", "credit card"]
        }
      }
    },
    "order_complete": {
      "type": "object",
      "properties": {
        "id": {
          "type": "number"
        },
        "status": {
          "type": "string",
          "enum": ["new", "confirmed", "preparing", "delivering", "delivered"]
        },
        "description": {
          "type": "string",
          "example": "1xDoubleBurg 2xFrenchFr"
        },
        "amount": {
          "type": "number"
        },
        "paymentMethod": {
          "type": "string",
          "description": "payment method chosen by the user",
          "enum": ["cash", "credit card"]
        },
        "userId": {
          "type": "number"
        },
        "products": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/product_stored"
          }
        }
      }
    },
    "order_uploaded": {
      "type": "object",
      "properties": {
        "order_id": {
          "type": "number"
        },
        "order_status": {
          "type": "string",
          "enum": ["new", "confirmed", "preparing", "delivering", "delivered"]
        },
        "order_time": {
          "type": "string",
          "example": "17:39:20"
        },
        "order_description": {
          "type": "string",
          "example": "1xDoubleBurg 2xFrenchFr"
        },
        "order_amount": {
          "type": "number"
        },
        "payment_method": {
          "type": "string",
          "description": "payment method chosen by the user",
          "enum": ["cash", "credit card"]
        },
        "user_id": {
          "type": "number"
        }
      }
    },
    "selected_item": {
      "type": "object",
      "properties": {
        "productId": {
          "type": "number"
        },
        "quantity": {
          "type": "number"
        }
      }
    },
    "user_register": {
      "type": "object",
      "properties": {
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "role": {
          "type": "string",
          "enum": ["admin", "customer"]
        }
      }
    },
    "user_registered": {
      "type": "object",
      "properties": {
        "id": {
          "type": "number"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "role": {
          "type": "string",
          "enum": ["admin", "customer"]
        }
      }
    },
    "user_id": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "number"
        }
      }
    },
    "order_statusToUpload": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "description": "order status in the store",
          "enum": ["new", "confirmed", "preparing", "delivering", "delivered"]
        }
      }
    },
    "product_stored": {
      "type": "object",
      "required": ["name", "photoUrls", "price"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "example": 1
        },
        "name": {
          "type": "string",
          "example": "Double-burger"
        },
        "price": {
          "type": "number",
          "example": 500
        },
        "photo": {
          "type": "string",
          "example": "https://picsum.photos/200"
        },
        "createdAt": {
          "type": "string"
        }
      }
    },
    "product_upload": {
      "type": "object",
      "required": ["name", "photo", "price"],
      "properties": {
        "name": {
          "type": "string",
          "example": "Double-burger"
        },
        "photo": {
          "type": "string",
          "example": "https://picsum.photos/200"
        },
        "price": {
          "type": "number",
          "example": 500
        }
      }
    }
  }
}
